pipeline {
    agent any

    environment {
        VIRTUAL_ENV = 'venv'
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
        IMAGE_NAME = 'bankingsystem:v1'
        DOCKER_REGISTRY = 'sasisandeepsingh'
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
        MINIKUBE_HOME = "$HOME/.minikube"
    }

    stages {

        stage('Clone Repository') {
            steps {
                git branch: 'main', 
                    credentialsId: 'Git_Jenkins',  
                    url: 'https://github.com/sunny567s35/BankingSystem.git'
            }
        }

        stage('Build and Tag Docker Image') {
            steps {
                script {
                    sh '''
                        echo "Building Docker image..."
                        cd BankingSystem/BankingSystem
                        echo "9848" | sudo -S docker build -t $DOCKER_REGISTRY/$IMAGE_NAME .
                        echo "Docker image built and tagged as $DOCKER_REGISTRY/$IMAGE_NAME"
                    '''
                }
            }
        }

        stage('Run Locally') {
            steps {
                script {
                    sh '''
                        echo "Stopping any running containers..."
                        echo "9848" | sudo -S docker stop $(docker ps -q) || true
                        echo "9848" | sudo -S docker rm $(docker ps -aq) || true

                        echo "Running container locally for testing..."
                        echo "9848" | sudo -S docker run -d -p 8000:8000 --name bankingsystem-test $DOCKER_REGISTRY/$IMAGE_NAME

                        echo "App is accessible locally at http://localhost:8000"
                        sleep 10
                        docker logs bankingsystem-test --tail 20
                    '''
                }
            }
        }

        stage('Connect Minikube') {
            steps {
                script {
                    withEnv([
                        "DOCKER_HOST=tcp://192.168.49.2:2376",
                        "DOCKER_CERT_PATH=/var/lib/jenkins/.minikube/certs",
                        "DOCKER_TLS_VERIFY=1"
                    ]) {
                        sh '''
                            echo "9848" | sudo -S chown -R $USER $HOME/.minikube
                            echo "9848" | sudo -S chmod -R u+wrx $HOME/.minikube
                            echo "9848" | sudo -S chmod 600 /home/sandeep/.minikube/certs/key.pem
                            echo "9848" | sudo -S chmod 600 /home/sandeep/.minikube/certs/cert.pem
                            echo "9848" | sudo -S chown -R $USER:$USER /home/sandeep/.minikube
                            echo "9848" | sudo -S chmod -R 700 /home/sandeep/.minikube

                            minikube status && kubectl cluster-info
                            kubectl config use-context minikube
                        '''
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                sh '''
                    cd BankingSystem/BankingSystem
                    kubectl apply -f k8s/deployment.yaml
                    kubectl apply -f k8s/django-service.yaml
                    kubectl apply -f k8s/celery-worker.yaml
                    kubectl apply -f k8s/celery-beat.yaml

                    echo "Waiting for Django pod to be created..."
                    timeout 120 bash -c 'until kubectl get pods -l app=django-app --field-selector=status.phase=Running | grep django-app; do sleep 5; done'
                    kubectl wait --for=condition=Ready pod -l app=django-app --timeout=600s || echo "Warning: Django pod not ready"
                '''
            }
        }

        stage('Deploy Monitoring') {
            steps {
                sh '''
                    cd BankingSystem/BankingSystem
                    kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
                    kubectl apply -f prometheus/ -n monitoring
                    kubectl apply -f grafana/ -n monitoring

                    for component in prometheus grafana; do
                        timeout 120 bash -c "until kubectl get pod -n monitoring -l app=${component} --ignore-not-found; do sleep 5; done"
                        kubectl wait --for=condition=Ready pod -l app=${component} --timeout=600s -n monitoring || echo "ERROR: ${component} did not become ready"
                    done
                '''
            }
        }

        stage('Start Celery Services') {
            steps {
                sh '''
                    echo "Waiting for Celery worker to be ready..."
                    timeout 120 bash -c 'until kubectl get pods -l app=celery-worker --field-selector=status.phase=Running | grep celery-worker; do sleep 5; done'
                    echo "Waiting for Celery Beat to be ready..."
                    timeout 120 bash -c 'until kubectl get pods -l app=celery-beat --field-selector=status.phase=Running | grep celery-beat; do sleep 5; done'
                    kubectl wait --for=condition=Ready pod -l app=celery-worker --timeout=600s || echo "ERROR: Celery worker not ready"
                    kubectl wait --for=condition=Ready pod -l app=celery-beat --timeout=600s || echo "ERROR: Celery Beat not ready"
                '''
            }
        }

        stage('Stable Port Forwarding') {
            steps {
                sh '''
                    sleep 20
                    nohup kubectl port-forward svc/django-service 8000:8000 --address 0.0.0.0 > django-portforward.log 2>&1 &
                    nohup kubectl port-forward svc/prometheus 9090:9090 --address 0.0.0.0 > prometheus-portforward.log 2>&1 &
                    nohup kubectl port-forward svc/grafana 3000:3000 --address 0.0.0.0 > grafana-portforward.log 2>&1 &
                    echo "Application is running at http://$(minikube ip):8000"
                    echo "Prometheus is running at http://$(minikube ip):9090"
                    echo "Grafana is running at http://$(minikube ip):3000"
                '''
            }
        }
    }
}
